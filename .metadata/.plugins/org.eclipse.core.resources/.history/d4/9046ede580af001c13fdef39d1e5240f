/**
 * 
 */
/**
 * @author springuser10
 *
 */
package com.tcs.crs.dao;

import org.springframework.stereotype.Repository;

@Repository
public class StudentDAO {
	
	// Dummy database. Initialize with some dummy values.
		//Here is the all method using dummy values
			private static List<Student> students;
			{
				students = new ArrayList();
				students.add(new Student(10, "Ram", "Mishra", "ram@gmail.com", "121-232-3789", "Kolkata", "Science"));	
				students.add(new Student(11, "Sam", "Mondal", "sam@gmail.com", "567-232-3789", "Delhi", "Arts"));
				students.add(new Student(12, "Raja", "Pal", "raja@gmail.com", "121-890-3789", "Pune", "Commerce"));
			}
			
			/**
			 * List of Student Implementation 
			 * @param 
			 *
			 */
			
			public List list() {
				return students;
			}
			
			
			/**
			 * Get the Student details with id 
			 * @param 
			 *
			 */
			
			public Student get(Long id) {

				for (Student e : students) {
					if (e.getId().equals(id)) {
						return e;
					}
				}
				return null;
			}
			
			/**
			 * create student
			 * @param 
			 *
			 */
			public Student create(Student student) {
				//student.setId(System.currentTimeMillis());
				students.add(student);
				return student;
			}
			
			/**
			 * Delete Student from DB
			 * @param 
			 *
			 */
			
			public Long delete(Long id) {

				for (Student c : students) {
					if (c.getId().equals(id)) {
						students.remove(c);
						return id;
						
					}
				}
				return null;
	}
			
			/**
			 * Update student in DB 
			 * @param 
			 *
			 */
			public Student update(Long id, Student student) {

				for (Student c : students) {
					if (c.getId().equals(id)) {
						student.setId(c.getId());
						students.remove(c);
						students.add(student);
						return student;
					}
				}

				return null;
			}
			
			/**
			 * Implementation for courses
			 * @param 
			 *
			 */
			private static List<Courses> courses;
			{
				courses = new ArrayList();
				courses.add(new Courses("cse"));
				courses.add(new Courses("ece"));
				courses.add(new Courses("it"));
			}
			
			/**
			 * List of course implementation
			 * @param 
			 *
			 */
			public List list1() {
				return courses;
			}
			/**
			 * Get the details for specific course
			 * @param 
			 *
			 */
 
			
			public Courses get(String course) {

				for (Courses e : courses) {
					if (e.getCourses().equals(course)) {
						return e;
					}
				}
				return null;
			}
			/**
			 * Add Courses
			 * @param 
			 *
			 */
			
			public Courses create(Courses course) {
				//course.setCourses(courses);(System.currentTimeMillis());
				courses.add(course);
				return course;
			
			}
			/**
			 * Delete Course
			 * @param 
			 *
			 */

			
			public String delete(String course) {

				for (Courses c : courses) {
					if (c.getCourses().equals(course)) {
						courses.remove(c);
						return course;
						
					}
				}
				return null;
	}
			
			/**
			 * GRADES LIST
			 * @param 
			 *
			 */
			
    /*    //Get the Grade details with 
			
			public Grade get(float grade) {

				for (Grade e : grades) {
					if (e.getGrade().equals(grade)) {
						return e;
					}
				}
				return null;
			}
			
			*/
}
